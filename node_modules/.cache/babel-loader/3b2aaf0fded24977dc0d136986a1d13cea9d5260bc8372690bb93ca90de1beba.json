{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tharu\\\\Downloads\\\\React-movie-trailer-app\\\\movie-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TMDB_API_KEY = \"e6fcd25d55477bb3d5d3e4cedfe19bfe\";\nconst TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = \"https://www.googleapis.com/youtube/v3/search\";\nconst App = () => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [trailerId, setTrailerId] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    fetchMovies(\"popular\");\n  }, []);\n  const fetchMovies = async query => {\n    const url = query === \"popular\" ? `${TMDB_BASE_URL}/movie/popular` : `${TMDB_BASE_URL}/search/movie`;\n    const response = await axios.get(url, {\n      params: {\n        api_key: TMDB_API_KEY,\n        query: query !== \"popular\" ? query : undefined\n      }\n    });\n    setMovies(response.data.results);\n    setSelectedMovie(response.data.results[0]);\n  };\n  const fetchTrailer = async movie => {\n    const response = await axios.get(`${TMDB_BASE_URL}/movie/${movie.id}/videos`, {\n      params: {\n        api_key: TMDB_API_KEY\n      }\n    });\n    const trailer = response.data.results.find(vid => vid.type === \"Trailer\");\n    if (trailer) {\n      setTrailerId(trailer.key);\n    } else {\n      fetchYouTubeTrailer(movie.title);\n    }\n  };\n  const fetchYouTubeTrailer = async movieTitle => {\n    const response = await axios.get(YOUTUBE_SEARCH_URL, {\n      params: {\n        key: YOUTUBE_API_KEY,\n        q: `${movieTitle} trailer`,\n        part: \"snippet\",\n        maxResults: 1,\n        type: \"video\"\n      }\n    });\n    const youtubeTrailer = response.data.items[0];\n    setTrailerId(youtubeTrailer ? youtubeTrailer.id.videoId : \"\");\n  };\n  const handleSearch = event => {\n    event.preventDefault();\n    if (searchTerm.trim()) {\n      fetchMovies(searchTerm);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      className: \"search-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search for movies...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), selectedMovie && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner\",\n      style: {\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${selectedMovie.backdrop_path})`\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: selectedMovie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedMovie.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => fetchTrailer(selectedMovie),\n          children: \"Play Trailer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), trailerId && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerId,\n      className: \"youtube-player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movies-grid\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `https://image.tmdb.org/t/p/w500/${movie.poster_path}`,\n          alt: movie.title,\n          onClick: () => setSelectedMovie(movie)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"deT/mVsW+x7LAs2qUWDpO42vJPk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","YouTube","jsxDEV","_jsxDEV","TMDB_API_KEY","TMDB_BASE_URL","YOUTUBE_API_KEY","process","env","REACT_APP_YOUTUBE_API_KEY","YOUTUBE_SEARCH_URL","App","_s","movies","setMovies","selectedMovie","setSelectedMovie","trailerId","setTrailerId","searchTerm","setSearchTerm","fetchMovies","query","url","response","get","params","api_key","undefined","data","results","fetchTrailer","movie","id","trailer","find","vid","type","key","fetchYouTubeTrailer","title","movieTitle","q","part","maxResults","youtubeTrailer","items","videoId","handleSearch","event","preventDefault","trim","className","children","onSubmit","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","backdrop_path","overview","onClick","map","src","poster_path","alt","_c","$RefreshReg$"],"sources":["C:/Users/tharu/Downloads/React-movie-trailer-app/movie-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport YouTube from \"react-youtube\";\nimport \"./App.css\";\n\nconst TMDB_API_KEY = \"e6fcd25d55477bb3d5d3e4cedfe19bfe\";\nconst TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\nconst YOUTUBE_API_KEY = process.env.REACT_APP_YOUTUBE_API_KEY;\nconst YOUTUBE_SEARCH_URL = \"https://www.googleapis.com/youtube/v3/search\";\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [trailerId, setTrailerId] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    fetchMovies(\"popular\");\n  }, []);\n\n  const fetchMovies = async (query) => {\n    const url = query === \"popular\"\n      ? `${TMDB_BASE_URL}/movie/popular`\n      : `${TMDB_BASE_URL}/search/movie`;\n\n    const response = await axios.get(url, {\n      params: { api_key: TMDB_API_KEY, query: query !== \"popular\" ? query : undefined },\n    });\n\n    setMovies(response.data.results);\n    setSelectedMovie(response.data.results[0]);\n  };\n\n  const fetchTrailer = async (movie) => {\n    const response = await axios.get(`${TMDB_BASE_URL}/movie/${movie.id}/videos`, {\n      params: { api_key: TMDB_API_KEY },\n    });\n\n    const trailer = response.data.results.find((vid) => vid.type === \"Trailer\");\n\n    if (trailer) {\n      setTrailerId(trailer.key);\n    } else {\n      fetchYouTubeTrailer(movie.title);\n    }\n  };\n\n  const fetchYouTubeTrailer = async (movieTitle) => {\n    const response = await axios.get(YOUTUBE_SEARCH_URL, {\n      params: {\n        key: YOUTUBE_API_KEY,\n        q: `${movieTitle} trailer`,\n        part: \"snippet\",\n        maxResults: 1,\n        type: \"video\",\n      },\n    });\n\n    const youtubeTrailer = response.data.items[0];\n    setTrailerId(youtubeTrailer ? youtubeTrailer.id.videoId : \"\");\n  };\n\n  const handleSearch = (event) => {\n    event.preventDefault();\n    if (searchTerm.trim()) {\n      fetchMovies(searchTerm);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <form onSubmit={handleSearch} className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Search for movies...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {selectedMovie && (\n        <div\n          className=\"banner\"\n          style={{\n            backgroundImage: `url(https://image.tmdb.org/t/p/original/${selectedMovie.backdrop_path})`,\n          }}\n        >\n          <div className=\"banner-content\">\n            <h1>{selectedMovie.title}</h1>\n            <p>{selectedMovie.overview}</p>\n            <button onClick={() => fetchTrailer(selectedMovie)}>Play Trailer</button>\n          </div>\n        </div>\n      )}\n\n      {trailerId && <YouTube videoId={trailerId} className=\"youtube-player\" />}\n\n      <div className=\"movies-grid\">\n        {movies.map((movie) => (\n          <div key={movie.id} className=\"movie-card\">\n            <img\n              src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n              alt={movie.title}\n              onClick={() => setSelectedMovie(movie)}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}